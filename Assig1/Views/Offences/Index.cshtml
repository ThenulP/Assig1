@model IEnumerable<Assig1.ViewModels.OffenceAndExpiationCategory>

@{
    ViewData["Title"] = "Index";
}

<div class="text-dark bg-gradient bg-warning p-2 my-2 border rounded">
    <h2>Index</h2>
</div>

<form asp-action="Index" method="get">
    <input type="text" id="offence" name="offence">
    <div id="suggestions" style="display: none;"></div>
    <button type="submit">Search</button>
    <select id="CategoryList" name="categoryId"class="form-control" >
        <option value="" >All Categories...</option>
    </select>
</form>

<div class="form-control">
    <button id="categoriesGraphButton" type="button">Check Category Offences</button>
    <div id="categoriesGraph" style="display: none;">
        <svg id="CategoryOffencesGraph" width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>
</div>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().ExpiationFee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().AdultLevy)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().CorporateFee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().TotalFee)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().DemeritPoints)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().SectionCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().SectionId)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ExpiationFee)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.AdultLevy)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CorporateFee)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TotalFee)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.DemeritPoints)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SectionCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SectionId)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.OffenceCode">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.OffenceCode">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.OffenceCode">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts{
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        document.addEventListener("DOMContentLoaded", function () {
            const inputField = document.getElementById('offence');
            const suggestionBox = document.getElementById('suggestions');
            console.log(inputField.value);

            inputField.addEventListener('input', function () {
                const query = inputField.value;

                if (query.length >= 2) {
                    fetch(`/OffenceController/GetOffenceDescriptions?search=${query}`)
                        .then(response => response.json())
                        .then(data => {
                            suggestionBox.innerHTML = '';
                            suggestionBox.style.display = 'block';

                            data.forEach(item => {
                                const div = document.createElement('div');
                                div.textContent = item;
                                div.classList.add('suggestion-item');
                                div.addEventListener('click', function () {
                                    inputField.value = item;
                                    suggestionBox.style.display = 'none';
                                });
                                suggestionBox.appendChild(div);
                            });
                        });
                } else {
                    suggestionBox.style.display = 'none';
                }
            });
            document.addEventListener('click', function (event) {
                if (!inputField.contains(event.target)) {
                    suggestionBox.style.display = 'none'; 
                }
            });

        });

        document.addEventListener("DOMContentLoaded", function () {
            const selectList = document.getElementById("CategoryList");
            fetch(`/OffenceController/GetCategories`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    console.log(data);
                    data.forEach(item => {
                        const option = document.createElement('option');
                        option.textContent = item.categoryName;
                        option.value = item.categoryId;
                        selectList.appendChild(option);
                        console.log(option);
                    });
                });
        });

        document.addEventListener("DOMContentLoaded", function () {
            const button = document.getElementById('categoriesGraphButton');
            const div = document.getElementById('categoriesGraph');
            const svg = d3.select('#CategoryOffencesGraph');

            button.addEventListener("click", function () {
                const chartMargins = { left: 40, right: 25, top: 25, bottom: 80 };

                div.style.display = 'block';

                svg.selectAll("*").remove();

                let w = svg.node().getBoundingClientRect().width - (chartMargins.left + chartMargins.right);
                let h = svg.node().getBoundingClientRect().height - (chartMargins.top + chartMargins.bottom);

                fetch(`/OffenceController/GetCategoryOffences`)
                    .then(response => response.json())
                    .then(data => buildGraph(data))
                    .catch(err => console.log(err.message));

                function buildGraph(dataSet) {
                    console.log(dataSet);

                    let totalOffencesRange = d3.extent(dataSet, (d) => +d.offenceCount);
                    let maxTotalOffences = totalOffencesRange[1];

                    const barWidth = w / dataSet.length;

                    let yScale = d3.scaleLinear()
                        .domain([0, maxTotalOffences])
                        .range([h, 0]); 

                    let categoryArray = Array.from(dataSet, (d, i) => d.CategoryName);
                    let xScale = d3.scaleBand()
                        .domain(categoryArray)
                        .range([0, w])
                        .paddingInner(0.1); 

                    const chartGroup = svg.append('g')
                        .classed('chartGroup', true)
                        .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

                    chartGroup.selectAll('rect')
                        .data(dataSet)
                        .enter()
                        .append('rect')
                        .attr('x', (d) => xScale(d.CategoryName))
                        .attr('y', (d) => yScale(d.offenceCount)) 
                        .attr('height', (d) => h - yScale(d.offenceCount))  
                        .attr('width', xScale.bandwidth())
                        .attr('fill', 'black');

                    chartGroup.selectAll('text')
                        .data(dataSet)
                        .enter()
                        .append('text')
                        .attr("text-anchor", "middle")
                        .attr('x', (d) => xScale(d.CategoryName) + xScale.bandwidth() / 2)
                        .attr('y', (d) => yScale(d.offenceCount) - 5) 
                        .attr('fill', 'white')
                        .style('font-size', '1em')
                        .text((d) => d.offenceCount.toLocaleString());

                    let yAxis = d3.axisLeft(yScale);
                    chartGroup.append('g')
                        .classed('axis y', true)
                        .call(yAxis);

                    let xAxis = d3.axisBottom(xScale);
                    chartGroup.append('g')
                        .attr('transform', `translate(0,${h})`)  
                        .classed('axis x', true)
                        .call(xAxis)
                        .selectAll("text") 
                        .style("text-anchor", "end")
                        .attr("dx", "-.8em")
                        .attr("dy", ".15em")
                        .attr("transform", "rotate(-90)");
                }
            });
        });



    </script>
}