@model Assig1.ViewModels.ExpiationDetails
@{
    ViewData["Title"] = "More Details";
}

<div class="text-dark bg-gradient bg-warning p-2 my-2 border rounded">
    <h1>More Details</h1>
</div>

<div>
    <dl id="descList" class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MaxSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MaxSpeed)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MinSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MinSpeed)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AvgSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AvgSpeed)
        </dd>
    </dl>
</div>
<div class="row">
    <div class="col-md-6 text-center">
        <h5>Total Monthly Fees Graph</h5>
        <svg id="totalFeesGraph" width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>
    <div class="col-md-6 text-center">
        <h5>Total Monthly Offences Graph</h5>
        <svg id="totalOffencesGraph" width="100%" height="600px" class="border border-primary rounded p-2"></svg>
    </div>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        const chartMargins = { left: 40, right: 25, top: 25, bottom: 80 };

        const svg1 = d3.select('#totalFeesGraph');
        const svg2 = d3.select('#totalOffencesGraph');

        let w1 = svg1.node().getBoundingClientRect().width;
        let h1 = svg1.node().getBoundingClientRect().height;

        let w2 = svg2.node().getBoundingClientRect().width;
        let h2 = svg2.node().getBoundingClientRect().height;

        w1 = w1 - (chartMargins.left + chartMargins.right);
        h1 = h1 - (chartMargins.top + chartMargins.bottom);
        w2 = w2 - (chartMargins.left + chartMargins.right);
        h2 = h2 - (chartMargins.top + chartMargins.bottom);

        const id = "@Model.OffenceCode";

        function getMonthName(monthNumber) {
            const monthNames = [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ];
            return monthNames[monthNumber - 1];
        }

        document.addEventListener("DOMContentLoaded", function () {
            fetch(`/OffenceController/GetTotalFeePerMonth?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(item => {
                        item.month = getMonthName(item.month);
                    });

                    return buildGraph1(data);
                })
                .catch(err => console.log(err.message));

            fetch(`/OffenceController/GetTotalOffencesPerMonth?id=${id}`)
                .then(response => response.json())
                .then(data => {
                    data.forEach(item => {
                        item.month = getMonthName(item.month);
                    });

                    return buildGraph2(data);
                })
                .catch(err => console.log(err.message));
        });

        function buildGraph1(dataSet) {
            console.log(dataSet);

            let totalFeesRange = d3.extent(dataSet, (d) => +d.totalFees);
            let maxTotalFees = totalFeesRange[1];

            console.log(maxTotalFees);

            const barWidth = w1 / dataSet.length;

            let yScale = d3.scaleLinear()
                .domain([0, maxTotalFees])
                .range([h1, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.month);

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w1])
                .paddingInner(0.1);

            const chartGroup = svg1.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

            let barGroups = chartGroup
                .selectAll('rect')
                .data(dataSet);

            barGroups.enter()
                .append('rect')
                .attr('x', (d) => xScale(d.month))
                .attr('y', (d) => yScale(d.totalFees))
                .attr('height', (d) => h1 - yScale(d.totalFees))
                .attr('width', xScale.bandwidth())
                .attr('fill', 'black');

            barGroups.enter()
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d) => xScale(d.month) + xScale.bandwidth() / 2) 
                .attr('y', (d) => {
                    let barHeight = h1 - yScale(d.totalFees); 
                    return yScale(d.totalFees) + barHeight / 2 + 5; 
                })
                .attr('fill', 'white')
                .style('font-size', '1em')
                .text((d) => d.totalFees.toLocaleString());


            console.log(barGroups);

            let yAxis = d3.axisLeft(yScale)
                .ticks(5)
                .tickFormat(d3.format("~s"));

            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
                .attr('transform', `translate(0,${h1})`)
                .classed('axis x', true)
                .call(xAxis);
        }

        function buildGraph2(dataSet) {
            console.log(dataSet);

            let totalOffencesRange = d3.extent(dataSet, (d) => +d.totalOffences);
            let maxTotalOffences = totalOffencesRange[1];

            console.log(maxTotalOffences);

            const barWidth = w2 / dataSet.length;

            let yScale = d3.scaleLinear()
                .domain([0, maxTotalOffences])
                .range([h2, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.month);

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w2])
                .paddingInner(0.1);

            const chartGroup = svg2.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

            let barGroups = chartGroup
                .selectAll('rect')
                .data(dataSet);

            barGroups.enter()
                .append('rect')
                .attr('x', (d) => xScale(d.month))
                .attr('y', (d) => yScale(d.totalOffences))
                .attr('height', (d) => h1 - yScale(d.totalOffences))
                .attr('width', xScale.bandwidth())
                .attr('fill', 'black');


            barGroups.enter()
                .append('text')
                .attr("text-anchor", "middle")
                .attr('x', (d) => xScale(d.month) + xScale.bandwidth() / 2) 
                .attr('y', (d) => {
                    let barHeight = h1 - yScale(d.totalOffences); 
                    return yScale(d.totalOffences) + barHeight / 2 + 5; 
                })
                .attr('fill', 'white')
                .style('font-size', '1em')
                .text((d) => d.totalOffences.toLocaleString());

            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
                .attr('transform', `translate(0,${h2})`)
                .classed('axis x', true)
                .call(xAxis);
        }
    </script>
}