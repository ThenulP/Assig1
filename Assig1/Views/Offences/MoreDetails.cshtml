@model Assig1.ViewModels.ExpiationDetails
@{
    ViewData["Title"] = "More Details";
}

<h1>MoreDetails</h1>

<div>
    <dl id="descList" class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MaxSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MaxSpeed)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.MinSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.MinSpeed)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => model.AvgSpeed)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.AvgSpeed)
        </dd>
    </dl>
</div>
<div>
    <svg id="totalFeesGraph" width="100%" height="600px" class="border border-primary rounded p-2"></svg>
</div>

@section scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        const svg = d3.select('#totalFeesGraph');

        let w = svg.node().getBoundingClientRect().width;
        let h = svg.node().getBoundingClientRect().height;

        const chartMargins = {left: 20, right: 25, top: 25, bottom: 80}

        w = w - (chartMargins.left + chartMargins.right);
        h = h - (chartMargins.top + chartMargins.bottom);

        const id = "@Model.OffenceCode"

        document.addEventListener("DOMContentLoaded", function () {
            fetch(`/OffenceController/GetTotalFeePerMonth?id=${id}`)
                .then(response => {
                    return response.json()
                })
                .then(data => buildGraph(data))
                .catch(err => console.log(err.message))
        });

        function buildGraph(dataSet) {
            console.log(dataSet);
            let totalFeesRange = d3.extent(dataSet, (d, i) => +d.totalFees);
            let maxTotalFees = totalFeesRange[1];

            console.log(maxTotalFees);

            const barMargin = 10;
            const barWidth = w / dataSet.length;

            let yScale = d3.scaleLinear()
                .domain([0, maxTotalFees])
                .range([h, 0]);

            let monthArray = Array.from(dataSet, (d, i) => d.month);

            let xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, w])
                .paddingInner(0.05)

            const chartGroup = svg.append('g')
                .classed('chartGroup', true)
                .attr('transform', `translate(${chartMargins.left}, ${chartMargins.top})`);

            let barGroups = svg
                .selectAll('g')
                .data(dataSet);

            let newBarGroups = barGroups.enter()
                .append('g')
                .attr('transform', (d, i) => {
                    return `translate(${xScale(d.month)}, ${yScale(d.totalFees)})`;
                });

            newBarGroups
                .append('rect')
                .attr('x', 0)
                .attr('height', (d, i) => { return h - yScale(d.totalFees); })
                .attr('width', xScale.bandwidth())
                .attr('fill', 'black')

            let yAxis = d3.axisLeft(yScale);
            chartGroup.append('g')
                .classed('axis y', true)
                .call(yAxis);

            let xAxis = d3.axisBottom(xScale);
            chartGroup.append('g')
            .attr('transform', `translate(0,${h})`)
                .classed('axis x', true)
                .call(xAxis);

        }

    </script>
}